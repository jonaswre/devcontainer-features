name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate devcontainer features
        uses: devcontainers/action@v1
        with:
          validate-only: true
          base-path-to-features: ./src
          
  test:
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        features:
          - claude-code
        baseImage:
          - mcr.microsoft.com/devcontainers/base:ubuntu
    steps:
      - uses: actions/checkout@v4

      - name: Install devcontainer CLI
        run: npm install -g @devcontainers/cli

      - name: Test feature
        run: |
          echo "Testing ${{ matrix.features }} feature"
          devcontainer features test \
            --skip-scenarios \
            --features ${{ matrix.features }} \
            --base-image ${{ matrix.baseImage }} \
            .
  
  test-firewall:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Test firewall with proper capabilities
        run: |
          # Build and run container with firewall capabilities
          docker build -t test-firewall-img \
            --build-arg VARIANT=ubuntu \
            -f - . <<EOF
          FROM mcr.microsoft.com/devcontainers/base:ubuntu
          
          # Copy feature files
          COPY ./src/claude-code /tmp/feature-src
          COPY ./test/claude-code /tmp/test-src
          
          # Ensure vscode user has sudo permissions (user already exists in base image)
          RUN usermod -aG sudo vscode 2>/dev/null || true && \
              echo "vscode ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
          
          # Install the feature
          RUN apt-get update && \
              cd /tmp/feature-src && \
              chmod +x install.sh && \
              _REMOTE_USER=vscode \
              _REMOTE_USER_HOME=/home/vscode \
              ENABLEFIREWALL=true \
              ./install.sh
          
          # Copy test files
          RUN cp -r /tmp/test-src /test
          
          # Make test executable
          RUN chmod +x /test/test-with-firewall.sh
          EOF
          
          # Run container with NET_ADMIN and NET_RAW capabilities
          docker run --rm \
            --cap-add=NET_ADMIN \
            --cap-add=NET_RAW \
            test-firewall-img \
            bash -c "sudo /usr/local/bin/init-firewall.sh && /test/test-with-firewall.sh"