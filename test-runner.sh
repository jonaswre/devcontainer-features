#!/bin/bash
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
FEATURE_DIR="$SCRIPT_DIR/src/claude-code"
TEST_DIR="$SCRIPT_DIR/test/claude-code"

COLOR_RESET='\033[0m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[0;33m'
COLOR_RED='\033[0;31m'
COLOR_BLUE='\033[0;34m'

print_header() {
    echo -e "${COLOR_BLUE}========================================${COLOR_RESET}"
    echo -e "${COLOR_BLUE}$1${COLOR_RESET}"
    echo -e "${COLOR_BLUE}========================================${COLOR_RESET}"
}

print_success() {
    echo -e "${COLOR_GREEN}✅ $1${COLOR_RESET}"
}

print_warning() {
    echo -e "${COLOR_YELLOW}⚠️  $1${COLOR_RESET}"
}

print_error() {
    echo -e "${COLOR_RED}❌ $1${COLOR_RESET}"
}

check_prerequisites() {
    print_header "Checking Prerequisites"
    
    if ! command -v docker >/dev/null 2>&1; then
        print_error "Docker is not installed"
        exit 1
    fi
    print_success "Docker is installed"
    
    if ! command -v npm >/dev/null 2>&1; then
        print_warning "NPM not installed - installing DevContainer CLI may be needed"
    else
        print_success "NPM is installed"
    fi
    
    if ! command -v devcontainer >/dev/null 2>&1; then
        print_warning "DevContainer CLI not installed"
        echo "Install with: npm install -g @devcontainers/cli"
        read -p "Install now? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            npm install -g @devcontainers/cli
        else
            exit 1
        fi
    else
        print_success "DevContainer CLI is installed"
    fi
}

validate_structure() {
    print_header "Validating Feature Structure"
    
    if [ ! -f "$FEATURE_DIR/devcontainer-feature.json" ]; then
        print_error "devcontainer-feature.json not found"
        exit 1
    fi
    
    if command -v jq >/dev/null 2>&1; then
        if jq '.' "$FEATURE_DIR/devcontainer-feature.json" >/dev/null 2>&1; then
            print_success "devcontainer-feature.json is valid JSON"
        else
            print_error "devcontainer-feature.json is not valid JSON"
            exit 1
        fi
    else
        print_warning "jq not installed, skipping JSON validation"
        echo "Install with: apt-get install jq (or brew install jq on macOS)"
    fi
    
    if [ ! -f "$FEATURE_DIR/install.sh" ]; then
        print_error "install.sh not found"
        exit 1
    fi
    
    if [ ! -x "$FEATURE_DIR/install.sh" ]; then
        print_warning "install.sh is not executable, fixing..."
        chmod +x "$FEATURE_DIR/install.sh"
    fi
    print_success "install.sh is executable"
    
    for test_script in "$TEST_DIR"/*.sh; do
        if [ -f "$test_script" ] && [ ! -x "$test_script" ]; then
            print_warning "$(basename "$test_script") is not executable, fixing..."
            chmod +x "$test_script"
        fi
    done
    print_success "All test scripts are executable"
}

run_basic_tests() {
    print_header "Running Basic Tests"
    
    echo "Testing with default configuration..."
    if devcontainer features test \
        --features "$FEATURE_DIR" \
        --base-image mcr.microsoft.com/devcontainers/base:debian; then
        print_success "Basic tests passed"
    else
        print_error "Basic tests failed"
        return 1
    fi
}

run_scenario_tests() {
    print_header "Running Scenario Tests"
    
    if [ ! -f "$TEST_DIR/scenarios.json" ]; then
        print_warning "No scenarios.json found, skipping scenario tests"
        return 0
    fi
    
    echo "Testing various configurations..."
    if devcontainer features test \
        --features "$FEATURE_DIR" \
        --skip-autogenerated; then
        print_success "Scenario tests passed"
    else
        print_error "Scenario tests failed"
        return 1
    fi
}

run_specific_scenario() {
    local scenario="$1"
    print_header "Running Scenario: $scenario"
    
    if devcontainer features test \
        --features "$FEATURE_DIR" \
        --filter "$scenario"; then
        print_success "Scenario '$scenario' passed"
    else
        print_error "Scenario '$scenario' failed"
        return 1
    fi
}

lint_scripts() {
    print_header "Linting Shell Scripts"
    
    if ! command -v shellcheck >/dev/null 2>&1; then
        print_warning "ShellCheck not installed, skipping linting"
        echo "Install with: apt-get install shellcheck (or brew install shellcheck on macOS)"
        return 0
    fi
    
    local failed=0
    for script in "$FEATURE_DIR"/*.sh "$TEST_DIR"/*.sh; do
        if [ -f "$script" ]; then
            echo "Checking $(basename "$script")..."
            if shellcheck --severity=error "$script"; then
                print_success "$(basename "$script") passed linting"
            else
                print_error "$(basename "$script") failed linting"
                failed=1
            fi
        fi
    done
    
    return $failed
}

show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -a, --all           Run all tests (default)"
    echo "  -b, --basic         Run basic tests only"
    echo "  -s, --scenarios     Run scenario tests only"
    echo "  -S, --scenario NAME Run specific scenario"
    echo "  -l, --lint          Lint scripts only"
    echo "  -v, --validate      Validate structure only"
    echo "  -h, --help          Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                  Run all tests"
    echo "  $0 --basic          Run basic tests"
    echo "  $0 --scenario node-22  Run node-22 scenario"
}

main() {
    local test_type="all"
    local specific_scenario=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -a|--all)
                test_type="all"
                shift
                ;;
            -b|--basic)
                test_type="basic"
                shift
                ;;
            -s|--scenarios)
                test_type="scenarios"
                shift
                ;;
            -S|--scenario)
                test_type="specific"
                specific_scenario="$2"
                shift 2
                ;;
            -l|--lint)
                test_type="lint"
                shift
                ;;
            -v|--validate)
                test_type="validate"
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    print_header "Claude Code Feature Test Runner"
    echo "Test type: $test_type"
    echo ""
    
    check_prerequisites
    
    case $test_type in
        all)
            validate_structure
            lint_scripts || true
            run_basic_tests
            run_scenario_tests
            ;;
        basic)
            validate_structure
            run_basic_tests
            ;;
        scenarios)
            validate_structure
            run_scenario_tests
            ;;
        specific)
            validate_structure
            run_specific_scenario "$specific_scenario"
            ;;
        lint)
            lint_scripts
            ;;
        validate)
            validate_structure
            ;;
    esac
    
    print_header "Test Summary"
    print_success "All selected tests completed successfully!"
}

main "$@"